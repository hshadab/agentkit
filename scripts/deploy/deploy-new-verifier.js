const { Web3 } = require('web3');
const fs = require('fs');
const solc = require('solc');
require('dotenv').config();

async function deployNewVerifier() {
    console.log("🚀 Deploying New Verifier Contract");
    console.log("=".repeat(60));
    
    try {
        // 1. Setup Web3
        const web3 = new Web3('https://ethereum-sepolia-rpc.publicnode.com');
        const privateKey = '0x' + process.env.DEPLOYER_PRIVATE_KEY.replace('0x', '');
        const account = web3.eth.accounts.privateKeyToAccount(privateKey);
        web3.eth.accounts.wallet.add(account);
        
        console.log(`📍 Deployer: ${account.address}`);
        
        // Check balance
        const balance = await web3.eth.getBalance(account.address);
        console.log(`💰 Balance: ${web3.utils.fromWei(balance.toString(), 'ether')} ETH`);
        
        // 2. Read and compile contract
        console.log("\n📄 Reading contract...");
        const contractPath = './contracts/RealProofOfProofVerifier_New.sol';
        const contractSource = fs.readFileSync(contractPath, 'utf8');
        
        // Simple compilation (for Solidity 0.8.x generated by snarkjs)
        console.log("🔨 Compiling contract...");
        const input = {
            language: 'Solidity',
            sources: {
                'Verifier.sol': {
                    content: contractSource
                }
            },
            settings: {
                outputSelection: {
                    '*': {
                        '*': ['*']
                    }
                }
            }
        };
        
        const output = JSON.parse(solc.compile(JSON.stringify(input)));
        
        if (output.errors) {
            output.errors.forEach(err => {
                if (err.severity === 'error') {
                    console.error('❌ Compilation error:', err.message);
                }
            });
            if (output.errors.some(e => e.severity === 'error')) {
                throw new Error('Compilation failed');
            }
        }
        
        // Get contract data
        const contractName = Object.keys(output.contracts['Verifier.sol'])[0];
        const contract = output.contracts['Verifier.sol'][contractName];
        const bytecode = contract.evm.bytecode.object;
        const abi = contract.abi;
        
        console.log(`✅ Contract compiled: ${contractName}`);
        console.log(`📏 Bytecode size: ${bytecode.length / 2} bytes`);
        
        // 3. Deploy contract
        console.log("\n📤 Deploying contract...");
        const Contract = new web3.eth.Contract(abi);
        
        const deployTx = Contract.deploy({
            data: '0x' + bytecode
        });
        
        const gas = await deployTx.estimateGas();
        const gasPrice = await web3.eth.getGasPrice();
        
        console.log(`⛽ Estimated gas: ${gas}`);
        console.log(`💵 Gas price: ${web3.utils.fromWei(gasPrice.toString(), 'gwei')} gwei`);
        
        const deployment = await deployTx.send({
            from: account.address,
            gas: Math.floor(gas * 1.2),
            gasPrice: gasPrice.toString()
        });
        
        console.log("\n✅ CONTRACT DEPLOYED!");
        console.log("=".repeat(60));
        console.log(`📍 Address: ${deployment.options.address}`);
        console.log(`📝 Transaction: ${deployment._requestManager._provider.lastTxHash || 'N/A'}`);
        
        // 4. Save deployment info
        const deploymentInfo = {
            network: "sepolia",
            chainId: 11155111,
            contracts: {
                RealProofOfProofVerifier: {
                    address: deployment.options.address,
                    deployer: account.address,
                    deployedAt: new Date().toISOString(),
                    zkeyFile: "build/real_proof_of_proof_final.zkey",
                    contractFile: contractPath
                }
            }
        };
        
        fs.writeFileSync('deployment-latest-verifier.json', JSON.stringify(deploymentInfo, null, 2));
        console.log("\n💾 Deployment info saved to deployment-latest-verifier.json");
        
        // 5. Create update script
        const updateScript = `// Update these addresses in your code:
// File: static/ethereum-verifier.js
// Old: 0x7eCe59B5e5fBEbf8761642352d70ADdCA7B38d29
// New: ${deployment.options.address}

// File: static/ethereum-verifier-mock.js  
// Update the contract address there too

// Test files that need updating:
// - verify-existing-onchain.js
// - verify-all-proof-types-onchain.js
// - verify-onchain-simple.js
`;
        
        fs.writeFileSync('UPDATE_CONTRACT_ADDRESSES.txt', updateScript);
        console.log("\n📋 Update instructions saved to UPDATE_CONTRACT_ADDRESSES.txt");
        
        return {
            success: true,
            address: deployment.options.address,
            deployer: account.address
        };
        
    } catch (error) {
        console.error("\n❌ Deployment failed:", error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

// Deploy
deployNewVerifier()
    .then(result => {
        console.log("\n📊 Final result:", result);
        if (result.success) {
            console.log("\n✅ Next steps:");
            console.log("1. Update contract addresses in code");
            console.log("2. Run: node update-contract-addresses.js");
            console.log("3. Test: node verify-all-proof-types-onchain.js");
        }
        process.exit(result.success ? 0 : 1);
    })
    .catch(err => {
        console.error("Fatal error:", err);
        process.exit(1);
    });